if not game:IsLoaded() then
    game.Loaded:Wait()
    end
    
    
    -- // Dependencies
    _G.PRED = 0.0445
    local FOV = loadstring(game:HttpGet("https://raw.githubusercontent.com/xllaoxxzx/fuckinngr/main/sas"))()
    local FOV = {
    FOV.TeamCheck(false)
    FOV.ShowFOV = false
    FOV.FOV = 20
    }
    getgenv().FOV = FOV
    -- // Services
    local Workspace = game:GetService("Workspace")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    
    -- // Vars
    local LocalPlayer = Players.LocalPlayer
    local CurrentCamera = Workspace.CurrentCamera
    
    local HoodCustomSettings = {
        SilentAim = true,
        AimLock = true,
        Prediction = 0.157,
        AimLockKeybind = "Q"
    }
    getgenv().HoodCustomSettings = HoodCustomSettings

    -- // Overwrite to account downed
    function FOV.Check()
        -- // Check A
        if not (FOV.Enabled == true and FOV.Selected ~= LocalPlayer and FOV.SelectedPart ~= nil) then
            return false
        end
    
        -- // Check if downed
        local Character = FOV.Character(FOV.Selected)
        local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    
        -- // Check B
        if (KOd or Grabbed) then
            return false
        end
    
        -- //
        return true
    end
    
    -- // Hook
    local __index
    __index = hookmetamethod(game, "__index", function(t, k)
        -- // Check if it trying to get our mouse's hit or target and see if we can use it
        if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and FOV.Check()) then
            -- // Vars
            local SelectedPart = FOV.SelectedPart
    
            -- // Hit/Target
            if (HoodCustomSettings.SilentAim and (k == "Hit" or k == "Target")) then
                -- // Hit to account prediction
                local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * HoodCustomSettings.Prediction)
    
                -- // Return modded val
                return (k == "Hit" and Hit or SelectedPart)
            end
        end
    
        -- // Return
        return __index(t, k)
    end)
    
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    
    mouse.KeyDown:Connect(function(key)
        if key == "v" then
            if FOV.Enabled == false then
            FOV.Enabled = true
            else
            FOV.Enabled = false
            end
        end
    end)
    
    
    RunService.RenderStepped:Connect(function()
        local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        local Value = tostring(ping)
        local pingValue = Value:split(" ")
        local PingNumber = pingValue[1]
        HoodCustomSettings.Prediction = PingNumber / 1000 + _G.PRED
    end)
    
    -- // Resolver
    loadstring(game:HttpGet("https://raw.githubusercontent.com/JordanLegit/resolver./main/resolver.lua"))()
